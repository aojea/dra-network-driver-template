name: e2e

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: "1.22"
  K8S_VERSION: "v1.31.0-rc.1"
  KIND_VERSION: "v0.24.0"
  KIND_CLUSTER_NAME: dra

permissions: write-all

jobs:
  e2e:
    name: e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 100
    strategy:
      fail-fast: false
      matrix:
        # only IPv4 is enough by now
        ipFamily: ["ipv4"]
    env:
      JOB_NAME: "dra-network-driver-${{ matrix.ipFamily }}"
      IP_FAMILY: ${{ matrix.ipFamily }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Install golang
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Enable ipv4 and ipv6 forwarding
      run: |
        sudo sysctl -w net.ipv6.conf.all.forwarding=1
        sudo sysctl -w net.ipv4.ip_forward=1

    - name: Set up environment (download dependencies)
      run: |
        TMP_DIR=$(mktemp -d)
        # Download kubernetes artifacts
        curl -L https://dl.k8s.io/${{ env.K8S_VERSION }}/kubernetes-server-linux-amd64.tar.gz -o ${TMP_DIR}/kubernetes-server-linux-amd64.tar.gz
        # kind TODO use 0.24.0 once is released to allow to build from tarballs
        go install sigs.k8s.io/kind@v0.24.0-alpha.0.20240806002849-00d659bd28be
        sudo cp $(go env GOPATH)/bin/kind /usr/local/bin/kind
        # kind image
        /usr/local/bin/kind build node-image ${TMP_DIR}/kubernetes-server-linux-amd64.tar.gz --image kindest/kindnode:latest
        # Get the e2e and ginkgo binaries TODO add DRA e2e test steps later
        curl -L https://dl.k8s.io/${{ env.K8S_VERSION }}/kubernetes-test-linux-amd64.tar.gz -o ${TMP_DIR}/kubernetes-test-linux-amd64.tar.gz
        tar xvzf ${TMP_DIR}/kubernetes-test-linux-amd64.tar.gz \
          --directory ${TMP_DIR} \
          --strip-components=3 kubernetes/test/bin/ginkgo kubernetes/test/bin/e2e.test
        # kubectl
        curl -L https://dl.k8s.io/${{ env.K8S_VERSION }}/bin/linux/amd64/kubectl -o ${TMP_DIR}/kubectl
        # Install
        sudo cp ${TMP_DIR}/ginkgo /usr/local/bin/ginkgo
        sudo cp ${TMP_DIR}/e2e.test /usr/local/bin/e2e.test
        sudo cp ${TMP_DIR}/kubectl /usr/local/bin/kubectl
        sudo chmod +x /usr/local/bin/*
        # Clean
        sudo rm -rf ${TMP_DIR}

    - name: Create multi node cluster
      run: |
        # output_dir
        mkdir -p _artifacts
        # create cluster
        /usr/local/bin/kind create cluster --name ${{ env.KIND_CLUSTER_NAME}} --image kindest/kindnode:latest --config kind.yaml
        # dump the kubeconfig for later
        /usr/local/bin/kind get kubeconfig --name ${{ env.KIND_CLUSTER_NAME}} > _artifacts/kubeconfig.conf

    - name: Install dra-network-driver
      run: |
        make kind-image

    - name: Get Cluster status
      run: |
        # wait network is ready
        sleep 5
        /usr/local/bin/kubectl get nodes -o wide
        /usr/local/bin/kubectl get pods -A
        /usr/local/bin/kubectl wait --timeout=1m --for=condition=ready pods --namespace=kube-system -l k8s-app=kube-dns
        /usr/local/bin/kubectl wait --timeout=1m --for=condition=ready pods --namespace=kube-system -l app=dra-network-driver

    - name: Run smoke tests
      run: |
        # Create dummy interface on worker 1
        cat examples/add_dummy_iface.sh | docker exec -i ${{ env.KIND_CLUSTER_NAME }}-worker bash
        docker exec -i ${{ env.KIND_CLUSTER_NAME }}-worker ip a
        /usr/local/bin/kubectl apply -f examples/deviceclass.yaml
        /usr/local/bin/kubectl apply -f examples/resourceclaimtemplate.yaml
        /usr/local/bin/kubectl apply -f examples/pod0_resourceclaimtemplate.yaml
        # TODO investigate if there is a bug if the request is created before
        # any resource is available, sync period is 15 seconds so this should
        # guarantee the resource is exposed at the time the pod is created
        sleep 31
        /usr/local/bin/kubectl get pods pod0 -o yaml
        /usr/local/bin/kubectl get deviceclass -o yaml
        /usr/local/bin/kubectl get resourceslices -o yaml
        /usr/local/bin/kubectl wait --timeout=1m --for=condition=ready pods pod0
        /usr/local/bin/kubectl get pods pod0 -o yaml

    - name: Upload Junit Reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: kind-junit-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: './_artifacts/*.xml'

    - name: Export logs
      if: always()
      run: |
        /usr/local/bin/kind export logs --name ${KIND_CLUSTER_NAME} --loglevel=debug ./_artifacts/logs

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: kind-logs-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: ./_artifacts/logs
